// The difference between O(N) and O(log(N)) list search is well known but I've never seen an answer to the question of
// where the runtimes cross. Obviously, the answer depends on many details. This perfspec answers that question.
// Specifically, generate lists of various lengths and run some searches on them. Use a substn to vary this between lists
// and olists, and another to search both integers and tuple. Run 1000 lookups and avg. Only param is listSize, the 2 substns
// give additional params.

import "olist" melted
import go "math/rand"
import go "os"
import go "log"

// size 100, 400, 1000, 2000
parameter "listSize:integer", "steady state size of list", "[100, 400, 1000, 2000]", "#{this}"

val tuptype = tuple(a:integer, b:float, c:string)

substitute LT_ET, "list or olist collection with integer or tuple elements",
    `val maker = \(x:integer) { x }; val elts = (1..listSize).{ maker(rand.Intn(50000)) }; val theList = elts`, "list(integer)",
    `val maker = \(x:integer) { [tuptype: x, 5.3*x, ["aa", "bcde", "erkj"][x%3]] }
        val elts = (1..listSize).{ maker(rand.Intn(50000)) }; val theList = elts`, "list(tuptype)",
    `val maker = \(x:integer) { x }; val elts = (1..listSize).{ maker(rand.Intn(50000)) }; val theList = [olist0(integer): elts]`, "olist0(integer)",
    `val maker = \(x:integer) { [tuptype: x, 5.3*x, ["aa", "bcde", "erkj"][x%3]] }
        val elts = (1..listSize).{ maker(rand.Intn(50000)) }
        val theList = [olist(tuptype, integer, \(x:tuptype) { x.a }): elts]`, "olist(tuptype...)"


val loadModel = \imp() {
    var dbgfile = os.Create("/dev/null")
    val logger = log.New(dbgfile.ok, "", 0)     // see below; logging disables unwanted compiler optimizations
    LT_ET
    val probes = (1..1000).{ maker(rand.Intn(50000)) }
    var found = 0
    val t0 = time.Now()
    each(elt^probes) if(elt in theList) found += 1
    val dur = time.Since(t0)
    logger.Println(found)
    output "lookupTime:avg lookup time across lookup phase:integer:nanosecond", "round(1e-3*dur)"
}

query `
    loadModel()
`