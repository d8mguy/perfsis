// Study set.subset operation for Gomap vs olist implementations. Use three parameters: (1) the size
// of the main set; (2) the size of the subset; (2) the probability that the tested subset is actually a subset of the main one.
// The last 2 parameters matter because as either gets smaller, the map implementation, which has to loop over full element
// tests, has less to do and hence, gets potentially faster.

import "set" melted
import "olist" melted
import go "math"

val tuptype = tuple(a:integer, b:float, c:string)
val olT = olist(tuptype, integer, \(atup:tuptype) { atup.a })

parameter "setSize:integer", "number of random items in main set", "[10000,50000,100000]"
parameter "otherSize:integer", "number of random items in set tested for subset", "[50,5000]"
parameter "yesprob:integer", "percent of cases where subset is true", "[5, 40, 80]"

val loadModel = \imp() {
    val maker = \(x:integer) { [tuptype: x, 5.3*x, ["aa", "bcde", "erkj"][x%3]] }
    var mintime = 100000000, maxtime = 0, timeAccum = 0
    var yescount = 0
    each(trial^1..20) {
        var mainSet:olT = []
        while(mainSet.count < setSize) mainSet.insertIfUniq(maker(rand.Intn(5*setSize)))
        var otherSet:olT = []
        // cvt yesprob to a fraction and calc a probability for each elt of otherSet to be in mainSet
        val logProbPerElt = math.Log(0.01*yesprob)/otherSize
        while(otherSet.count < otherSize) {
            val tmp = maker(rand.Intn(5*setSize))
            val isIn = tmp in mainSet
            // unusual condition equiv to (isIn && rand < prob) || (!isIn && rand >= prob)
            val logProb = math.Log(rand.Float64())
            if(isIn != (logProb >= logProbPerElt)) otherSet.insertIfUniq(tmp)
        }
        val t0 = time.Now()
        if(mainSet.contains(otherSet)) yescount += 1
        val d0:integer = time.Since(t0)
        if(d0 < mintime) mintime = d0
        if(d0 > maxtime) maxtime = d0
        timeAccum += d0
    }
    output "avg time:avg time to calc subset:integer:microsecond", "round(0.05*timeAccum)"
    output "min time:min time to calc subset:integer:microsecond", "mintime"
    output "max time:max time to calc subset:integer:microsecond", "maxtime"
    output "yesFract:fraction of trials responding yes:integer:percent", "5*yescount"
}

query `loadModel()
`